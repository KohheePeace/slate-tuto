'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var componentDefinitions = require('./componentDefinitions');

var PrismLoader = function () {
    function PrismLoader(componentsIndex) {
        _classCallCheck(this, PrismLoader);

        this.componentsIndex = componentsIndex;
    }

    /**
     * Load a component and its dependencies into the given Prism instance.
     * Does not load already loaded components
     * @param  {Prism}  Prism       The prism instance
     * @param  {String} componentId The component id
     * @return {Void}
     */


    _createClass(PrismLoader, [{
        key: 'load',
        value: function load(Prism, componentId) {
            var _this = this;

            if (Prism.languages[componentId]) {
                // Already loaded
                return;
            }

            var definition = componentDefinitions.COMPONENTS[componentId];
            if (!definition) {
                throw new Error('Unknown Prism component: ' + componentId);
            }

            // Load dependencies
            var dependencies = componentDefinitions.getDependencies(definition, Prism);
            dependencies.forEach(function (dep) {
                return _this.load(Prism, dep);
            });

            // Inject the component
            var component = this.componentsIndex[componentId];
            if (!component) {
                throw new Error('Missing Prism component: ' + componentId);
            }

            component(Prism);
        }
    }]);

    return PrismLoader;
}();

PrismLoader.COMPONENTS = componentDefinitions.COMPONENTS;
PrismLoader.getDependencies = componentDefinitions.getDependencies;
PrismLoader.isCommon = componentDefinitions.isCommon;

module.exports = PrismLoader;