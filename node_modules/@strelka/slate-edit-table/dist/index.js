'use strict';

var _require = require('is-hotkey'),
    toKeyCode = _require.toKeyCode;

var insertTable = require('./changes/insertTable');
var insertRow = require('./changes/insertRow');
var removeRow = require('./changes/removeRow');
var insertColumn = require('./changes/insertColumn');
var removeColumn = require('./changes/removeColumn');
var removeTable = require('./changes/removeTable');
var moveSelection = require('./changes/moveSelection');
var moveSelectionBy = require('./changes/moveSelectionBy');

var onTab = require('./handlers/onTab');
var onUpDown = require('./handlers/onUpDown');
var makeSchema = require('./validation/makeSchema');
var validateNode = require('./validation/validateNode');

var KEY_TAB = 'tab';
var KEY_DOWN = 'down';
var KEY_UP = 'up';

/**
 * @param {String} opts.typeTable The type of table blocks
 * @param {String} opts.typeRow The type of row blocks
 * @param {String} opts.typeCell The type of cell blocks
 * @param {String} opts.typeDefault The type of default block that could be inside cell
 */
function EditTable() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  opts.typeDefault = opts.typeDefault || 'paragraph';
  opts.typeTable = opts.typeTable || 'table';
  opts.typeRow = opts.typeRow || 'table_row';
  opts.typeCell = opts.typeCell || 'table_cell';

  /**
   * Is the selection in a table
   */
  function isSelectionInTable(value) {
    if (!value || !value.selection.startKey) return false;

    var tableBlock = value.document.getFurthestAncestor(value.selection.startKey);

    // Only handle events in cells
    return tableBlock && tableBlock.type === opts.typeTable;
  }

  /**
   * Bind a change
   */
  function bindTransform(fn) {
    return function (change) {
      if (!isSelectionInTable(change.value)) {
        return change;
      }

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return fn.apply(undefined, [opts, change].concat(args));
    };
  }

  /**
   * User is pressing a key in the editor
   */
  function onKeyDown(e, change) {
    // Only handle events in cells
    if (!isSelectionInTable(change.value)) {
      return;
    }

    // Build arguments list
    var args = [e, change, opts];

    switch (e.keyCode) {
      case toKeyCode(KEY_TAB):
        return onTab.apply(undefined, args);
      case toKeyCode(KEY_DOWN):
      case toKeyCode(KEY_UP):
        return onUpDown.apply(undefined, args);
    }
  }

  return {
    schema: makeSchema(opts),
    validateNode: validateNode(opts),
    onKeyDown: onKeyDown,
    utils: {
      isSelectionInTable: isSelectionInTable
    },
    changes: {
      insertTable: insertTable.bind(null, opts),
      insertRow: bindTransform(insertRow),
      removeRow: bindTransform(removeRow),
      insertColumn: bindTransform(insertColumn),
      removeColumn: bindTransform(removeColumn),
      removeTable: bindTransform(removeTable),
      moveSelection: bindTransform(moveSelection),
      moveSelectionBy: bindTransform(moveSelectionBy)
    }
  };
}

module.exports = EditTable;