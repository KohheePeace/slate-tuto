"use strict";

var legacySchema = function legacySchema(schema) {
  var renderNode = function renderNode(props) {
    var render = schema.nodes[props.node.type];
    return render ? render(props) : null;
  };

  var renderMark = function renderMark(props) {
    var render = schema.marks[props.mark.type];
    return render ? render(props) : null;
  };

  return {
    schema: {
      document: {
        nodes: Object.keys(schema.nodes)
      }
    },
    renderMark: renderMark,
    renderNode: renderNode
  };
};

var normalize = function normalize() {
  var reasons = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return function (change, reason, context) {
    var reasonFn = reasons[reason];
    if (reasonFn) {
      reasonFn(change, context);
    }
  };
};

var validateRules = function validateRules(rules) {
  var validators = rules.map(function (rule) {
    return function validateRule(node) {
      if (!rule.match(node)) {
        return undefined;
      }
      var validationResult = rule.validate(node);
      if (validationResult == null) {
        return undefined;
      }

      return function (change) {
        return rule.normalize(change, node, validationResult);
      };
    };
  });

  return function validateTableNode(node) {
    var changer = void 0;

    validators.find(function (validator) {
      changer = validator(node);
      return Boolean(changer);
    });

    return changer;
  };
};

module.exports = {
  legacySchema: legacySchema,
  validateRules: validateRules,
  normalize: normalize
};